{
  "version": 3,
  "sources": ["../client/src/socket.ts", "../client/src/dom.ts", "../client/src/game/util.ts", "../client/src/game/client.ts", "../client/src/game/game.ts"],
  "sourcesContent": ["let appUnloading = false;\n\nexport type Message = {\n  readonly channel: string;\n  readonly cmd: string;\n  readonly param: unknown;\n}\n\nfunction socketUrl(u?: string) {\n  if (!u) {\n    u = \"/connect\";\n  }\n  if (u.indexOf(\"ws\") === 0) {\n    return u;\n  }\n  const l = document.location;\n  let protocol = \"ws\";\n  if (l.protocol === \"https:\") {\n    protocol = \"wss\";\n  }\n  if (u.indexOf(\"/\") !== 0) {\n    u = \"/\" + u;\n  }\n  return protocol + `://${l.host}${u}`;\n}\n\nexport class Socket {\n  readonly debug: boolean;\n  private readonly open: () => void;\n  private readonly recv: (m: Message) => void;\n  private readonly err: (svc: string, err: string) => void;\n  readonly url?: string;\n  connected: boolean;\n  pauseSeconds: number;\n  pendingMessages: Message[];\n  connectTime?: number;\n  closed?: boolean;\n  sock?: WebSocket;\n\n  constructor(debug: boolean, o: () => void, r: (m: Message) => void, e: (svc: string, err: string) => void, url?: string) {\n    this.debug = debug;\n    this.open = o;\n    this.recv = r;\n    this.err = e;\n    this.url = socketUrl(url);\n    this.connected = false;\n    this.pauseSeconds = 1;\n    this.pendingMessages = [];\n\n    this.connect();\n  }\n\n  connect() {\n    window.onbeforeunload = () => {\n      appUnloading = true;\n    };\n    this.connectTime = Date.now();\n    this.sock = new WebSocket(socketUrl(this.url));\n    const s = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    this.sock.onopen = () => {\n      s.connected = true;\n      s.pendingMessages.forEach(s.send);\n      s.pendingMessages = [];\n      if (s.debug) {\n        console.log(\"WebSocket connected\");\n      }\n      s.open();\n    };\n    this.sock.onmessage = (event) => {\n      const msg = JSON.parse(event.data) as Message;\n      if (s.debug) {\n        console.debug(\"[socket]: receive\", msg);\n      }\n      if (msg.cmd === \"close-connection\") {\n        s.disconnect();\n      } else {\n        s.recv(msg);\n      }\n    };\n    this.sock.onerror = (event) => () => {\n      s.err(\"socket\", event.type);\n    };\n    this.sock.onclose = () => {\n      if (appUnloading || s.closed) {\n        return;\n      }\n      s.connected = false;\n      const elapsed = s.connectTime ? Date.now() - s.connectTime : 0;\n      if (elapsed > 0 && elapsed < 2000) {\n        s.pauseSeconds = s.pauseSeconds * 2;\n        if (s.debug) {\n          console.debug(`socket closed immediately, reconnecting in ${s.pauseSeconds} seconds`);\n        }\n        setTimeout(() => {\n          s.connect();\n        }, s.pauseSeconds * 1000);\n      } else {\n        console.debug(\"socket closed after [\" + elapsed + \"ms]\");\n        setTimeout(() => {\n          s.connect();\n        }, s.pauseSeconds * 500);\n      }\n    };\n  }\n\n  disconnect() {\n    this.closed = true;\n    setTimeout(() => {\n      this.sock?.close();\n      console.debug(\"[socket] closed\");\n    }, 500);\n  }\n\n  send(msg: Message) {\n    if (this.debug) {\n      console.debug(\"out\", msg);\n    }\n    if (!this.sock) {\n      throw new Error(\"socket not initialized\");\n    }\n    if (this.connected) {\n      const m = JSON.stringify(msg, null, 2);\n      this.sock.send(m);\n    } else {\n      this.pendingMessages.push(msg);\n    }\n  }\n}\n\nexport function socketInit() {\n  return Socket;\n}\n", "export function els<T extends HTMLElement>(selector: string, context?: Element): readonly T[] {\n  let result: NodeListOf<Element>;\n  if (context) {\n    result = context.querySelectorAll(selector);\n  } else {\n    result = document.querySelectorAll(selector);\n  }\n  const ret: T[] = [];\n  result.forEach((v) => {\n    ret.push(v as T);\n  });\n  return ret;\n}\n\nexport function opt<T extends HTMLElement>(selector: string, context?: Element): T | undefined {\n  const e = els<T>(selector, context);\n  switch (e.length) {\n    case 0:\n      return undefined;\n    case 1:\n      return e[0];\n    default:\n      console.warn(`found [${e.length}] elements with selector [${selector}], wanted zero or one`);\n  }\n}\n\nexport function req<T extends HTMLElement>(selector: string, context?: Element): T {\n  const res = opt<T>(selector, context);\n  if (!res) {\n    throw new Error(`no element found for selector [${selector}]`);\n  }\n  return res;\n}\n\nexport function setHTML(el: string | HTMLElement, html: string) {\n  if (typeof el === \"string\") {\n    el = req(el);\n  }\n  el.innerHTML = html;\n  return el;\n}\n\nexport function setDisplay(el: string | HTMLElement, condition: boolean, v = \"block\") {\n  if (typeof el === \"string\") {\n    el = req(el);\n  }\n\n  el.style.display = condition ? v : \"none\";\n  return el;\n}\n\nexport function clear(el: string | HTMLElement) {\n  return setHTML(el, \"\");\n}\n\nexport function setText(el: string | HTMLElement, text: string): HTMLElement {\n  if (typeof el === \"string\") {\n    el = req(el);\n  }\n  el.innerText = text;\n  return el;\n}\n", "import \"./game.css\";\nimport {opt} from \"../dom\";\n\nexport function appendLog(msg: string) {\n  const panel = opt<HTMLDivElement>(\"#log-panel\");\n  if (panel) {\n    const row = document.createElement(\"tr\");\n    const numTH = document.createElement(\"th\");\n    numTH.innerText = panel.children.length.toString();\n    const textTD = document.createElement(\"td\");\n    textTD.innerText = msg;\n    row.append(numTH, textTD);\n    panel.append(row);\n    const c = document.getElementById(\"content\");\n    c.scrollTo(0, c.scrollHeight);\n  } else {\n    console.log(\"[no-log-panel]: \" + msg);\n  }\n}\n", "import \"./game.css\";\nimport {opt, req} from \"../dom\";\nimport {appendLog} from \"./util\";\n\ndeclare const sendGameMessage: (t: string, data: { [key: string]: unknown }) => void;\ndeclare const log: (msg: string) => void;\n\nexport class GameClient {\n  init(ms: number, st: string) {\n    opt(\"#loading-panel\")?.remove();\n    req(\"#load-status\").innerText = \"Loaded in [\" + ms + \"ms]\";\n    log(`game [${st}] initialized in [${ms}ms]`);\n    sendGameMessage(\"welcome\", {ruleset: st});\n  }\n\n  onInput(key: string, msg: unknown) {\n    switch (key) {\n      case \"save\":\n        sendGameMessage(\"save\", {});\n        break;\n      case \"testbed\":\n        appendLog(JSON.stringify(msg, null, 2));\n        break;\n      default:\n        console.log(\"unhandled input [\" + key + \"].\");\n        break;\n    }\n  }\n}\n\nlet globalClient: GameClient;\n\nexport function setClient(cl: GameClient) {\n  globalClient = cl;\n}\n\nexport function client(): GameClient {\n  return globalClient;\n}\n", "import \"./game.css\";\nimport {Socket} from \"../socket\";\nimport {client, GameClient, setClient} from \"./client\";\nimport type {Message} from \"./message/message\";\n\nfunction wasmInit(ms: number, ruleset: string) {\n  setClient(new GameClient());\n  client().init(ms, ruleset);\n}\n\nfunction websocketInit(ms: number, url: string, rs: string) {\n  setClient(new GameClient());\n\n  function open() {\n    client().init(ms, rs);\n  }\n\n  function recv(m) {\n    handleMessage(client(), m.param as Message);\n  }\n\n  function err(e) {\n    console.log(\"[socket error]: \" + e);\n  }\n\n  const sock = new Socket(false, open, recv, err, url);\n\n  globalThis.log = (m: unknown) => console.log(m);\n  globalThis.sendGameMessage = (t: string, data: { [key: string]: unknown }) => {\n    sock.send({channel: \"game\", cmd: \"message\", param: {t, data}});\n  };\n}\n\nfunction handleMessage(gameClient: GameClient, msg: Message) {\n  console.log(\"received message: \" + JSON.stringify(msg));\n}\n\nglobalThis.wasmInit = wasmInit;\nglobalThis.websocketInit = websocketInit;\n\nglobalThis.onClientMessage = (msg) => handleMessage(client(), msg);\n"],
  "mappings": "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",
  "names": ["appUnloading", "socketUrl", "u", "l", "protocol", "Socket", "debug", "o", "r", "e", "url", "s", "event", "msg", "elapsed", "m", "els", "selector", "context", "result", "ret", "v", "opt", "e", "req", "res", "appendLog", "msg", "panel", "opt", "row", "numTH", "textTD", "c", "GameClient", "ms", "st", "opt", "req", "key", "msg", "appendLog", "globalClient", "setClient", "cl", "client", "wasmInit", "ms", "ruleset", "setClient", "GameClient", "client", "websocketInit", "url", "rs", "open", "recv", "m", "handleMessage", "err", "e", "sock", "Socket", "t", "data", "gameClient", "msg"]
}
