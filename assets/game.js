"use strict";(()=>{var u=!1;function m(t){if(t||(t="/connect"),t.indexOf("ws")===0)return t;let e=document.location,n="ws";return e.protocol==="https:"&&(n="wss"),t.indexOf("/")!==0&&(t="/"+t),n+`://${e.host}${t}`}var d=class{constructor(e,n,o,s,r){this.debug=e,this.open=n,this.recv=o,this.err=s,this.url=m(r),this.connected=!1,this.pauseSeconds=1,this.pendingMessages=[],this.connect()}connect(){window.onbeforeunload=()=>{u=!0},this.connectTime=Date.now(),this.sock=new WebSocket(m(this.url));let e=this;this.sock.onopen=()=>{e.connected=!0,e.pendingMessages.forEach(e.send),e.pendingMessages=[],e.debug&&console.log("WebSocket connected"),e.open()},this.sock.onmessage=n=>{let o=JSON.parse(n.data);e.debug&&console.debug("[socket]: receive",o),o.cmd==="close-connection"?e.disconnect():e.recv(o)},this.sock.onerror=n=>()=>{e.err("socket",n.type)},this.sock.onclose=()=>{if(u||e.closed)return;e.connected=!1;let n=e.connectTime?Date.now()-e.connectTime:0;n>0&&n<2e3?(e.pauseSeconds=e.pauseSeconds*2,e.debug&&console.debug(`socket closed immediately, reconnecting in ${e.pauseSeconds} seconds`),setTimeout(()=>{e.connect()},e.pauseSeconds*1e3)):(console.debug("socket closed after ["+n+"ms]"),setTimeout(()=>{e.connect()},e.pauseSeconds*500))}}disconnect(){this.closed=!0,setTimeout(()=>{this.sock?.close(),console.debug("[socket] closed")},500)}send(e){if(this.debug&&console.debug("out",e),!this.sock)throw new Error("socket not initialized");if(this.connected){let n=JSON.stringify(e,null,2);this.sock.send(n)}else this.pendingMessages.push(e)}};function w(t,e){let n;e?n=e.querySelectorAll(t):n=document.querySelectorAll(t);let o=[];return n.forEach(s=>{o.push(s)}),o}function c(t,e){let n=w(t,e);switch(n.length){case 0:return;case 1:return n[0];default:console.warn(`found [${n.length}] elements with selector [${t}], wanted zero or one`)}}function p(t,e){let n=c(t,e);if(!n)throw new Error(`no element found for selector [${t}]`);return n}function f(t){let e=c("#log-panel");if(e){let n=document.createElement("tr"),o=document.createElement("th");o.innerText=e.children.length.toString();let s=document.createElement("td");s.innerText=t,n.append(o,s),e.append(n);let r=document.getElementById("content");r.scrollTo(0,r.scrollHeight)}else console.log("[no-log-panel]: "+t)}var l=class{init(e,n){c("#loading-panel")?.remove(),p("#load-status").innerText="Loaded in ["+e+"ms]",log(`game [${n}] initialized in [${e}ms]`),sendGameMessage("welcome",{ruleset:n})}onInput(e,n){switch(e){case"save":sendGameMessage("save",{});break;case"testbed":f(JSON.stringify(n,null,2));break;default:console.log("unhandled input ["+e+"].");break}}},h;function g(t){h=t}function a(){return h}function M(t,e){g(new l),a().init(t,e)}function y(t,e,n){g(new l);function o(){a().init(t,n)}function s(i){T(a(),i.param)}function r(i){console.log("[socket error]: "+i)}let b=new d(!1,o,s,r,e);globalThis.log=i=>console.log(i),globalThis.sendGameMessage=(i,k)=>{b.send({channel:"game",cmd:"message",param:{t:i,data:k}})}}function T(t,e){console.log("received message: "+JSON.stringify(e))}globalThis.wasmInit=M;globalThis.websocketInit=y;globalThis.onClientMessage=t=>T(a(),t);})();
//# sourceMappingURL=game.js.map
